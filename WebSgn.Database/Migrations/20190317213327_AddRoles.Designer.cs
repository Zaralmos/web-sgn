// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebSgn.Database;

namespace WebSgn.Database.Migrations
{
    [DbContext(typeof(WebSgnDbContext))]
    [Migration("20190317213327_AddRoles")]
    partial class AddRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("WebSgn.Models.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentJson");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("WebSgn.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<bool>("IsApplicable");

                    b.Property<string>("Location");

                    b.Property<string>("Name");

                    b.Property<string>("Photo");

                    b.Property<string>("PhotoUrl");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("WebSgn.Models.DepartmentSection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("Name");

                    b.ToTable("DepartmentSections");
                });

            modelBuilder.Entity("WebSgn.Models.FIle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content");

                    b.Property<string>("MimeType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("WebSgn.Models.NewsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AnnouncedTime");

                    b.Property<int>("ArticleId");

                    b.Property<int?>("DepartmentId");

                    b.Property<bool>("IsWip");

                    b.Property<DateTime>("Published");

                    b.Property<string>("TagsString");

                    b.Property<string>("Titile");

                    b.Property<int>("Type");

                    b.Property<int>("UserId");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("NewsItems");
                });

            modelBuilder.Entity("WebSgn.Models.NewsItemDepartment", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<int>("NewsItemId");

                    b.HasKey("DepartmentId", "NewsItemId");

                    b.HasIndex("NewsItemId");

                    b.ToTable("NewsItemsDepartments");
                });

            modelBuilder.Entity("WebSgn.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AcademicStatus");

                    b.Property<int>("ArticleId");

                    b.Property<DateTime>("Birthday");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Description");

                    b.Property<string>("DisciplinesString");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("PersonalPageUrl");

                    b.Property<string>("Phone");

                    b.Property<string>("PhotoUrl");

                    b.Property<string>("Position");

                    b.Property<bool>("ShowEmail");

                    b.Property<bool>("ShowPhone");

                    b.Property<bool>("ShowVk");

                    b.Property<string>("VkUrl");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("WebSgn.Models.PersonDepartment", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<int>("PersonId");

                    b.HasKey("DepartmentId", "PersonId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonsDepartments");
                });

            modelBuilder.Entity("WebSgn.Models.Subscruber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("Phone");

                    b.Property<DateTime>("Subscribed");

                    b.HasKey("Id");

                    b.ToTable("Subscrubers");
                });

            modelBuilder.Entity("WebSgn.Models.TelemetricEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DomElement");

                    b.Property<string>("EventUrl");

                    b.Property<DateTime>("Fired");

                    b.Property<int>("MouseX");

                    b.Property<int>("MouseY");

                    b.Property<int>("ScreenHeight");

                    b.Property<int>("ScreenWidth");

                    b.Property<int>("SecondsOnline");

                    b.Property<string>("SessionId");

                    b.Property<string>("UserIp");

                    b.HasKey("Id");

                    b.ToTable("TelemetricEvents");
                });

            modelBuilder.Entity("WebSgn.Models.Users.Roles.WebSgnRoleBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("WebSgnRoleBase");
                });

            modelBuilder.Entity("WebSgn.Models.Users.WebSgnUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FullName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Phone");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<DateTime>("SignedUp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("WebSgn.Models.WebSgnUserDepartment", b =>
                {
                    b.Property<int>("DepartmentId");

                    b.Property<int>("WebSgnUserId");

                    b.HasKey("DepartmentId", "WebSgnUserId");

                    b.HasIndex("WebSgnUserId");

                    b.ToTable("WebSgnUsersDepartments");
                });

            modelBuilder.Entity("WebSgn.Models.Users.Roles.WebSgnAdminRole", b =>
                {
                    b.HasBaseType("WebSgn.Models.Users.Roles.WebSgnRoleBase");

                    b.HasDiscriminator().HasValue("WebSgnAdminRole");
                });

            modelBuilder.Entity("WebSgn.Models.Users.Roles.WebSgnModerRole", b =>
                {
                    b.HasBaseType("WebSgn.Models.Users.Roles.WebSgnRoleBase");

                    b.HasDiscriminator().HasValue("WebSgnModerRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("WebSgn.Models.Users.Roles.WebSgnRoleBase")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("WebSgn.Models.Users.WebSgnUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("WebSgn.Models.Users.WebSgnUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("WebSgn.Models.Users.Roles.WebSgnRoleBase")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebSgn.Models.Users.WebSgnUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("WebSgn.Models.Users.WebSgnUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebSgn.Models.DepartmentSection", b =>
                {
                    b.HasOne("WebSgn.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebSgn.Models.NewsItem", b =>
                {
                    b.HasOne("WebSgn.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebSgn.Models.Department")
                        .WithMany("NewsItems")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("WebSgn.Models.Users.WebSgnUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebSgn.Models.NewsItemDepartment", b =>
                {
                    b.HasOne("WebSgn.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebSgn.Models.NewsItem", "NewsItem")
                        .WithMany("Departments")
                        .HasForeignKey("NewsItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebSgn.Models.Person", b =>
                {
                    b.HasOne("WebSgn.Models.Article", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebSgn.Models.Department")
                        .WithMany("Persons")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("WebSgn.Models.PersonDepartment", b =>
                {
                    b.HasOne("WebSgn.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebSgn.Models.Person", "Person")
                        .WithMany("Departments")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebSgn.Models.Users.WebSgnUser", b =>
                {
                    b.HasOne("WebSgn.Models.Department")
                        .WithMany("WebSgnUsers")
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("WebSgn.Models.WebSgnUserDepartment", b =>
                {
                    b.HasOne("WebSgn.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WebSgn.Models.Users.WebSgnUser", "WebSgnUser")
                        .WithMany("Departments")
                        .HasForeignKey("WebSgnUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
